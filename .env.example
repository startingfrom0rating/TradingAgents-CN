# TradingAgents-CN ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆÁ§∫‰æã
# üîê ÈáçË¶ÅÔºöÂ§çÂà∂Ê≠§Êñá‰ª∂‰∏∫ .env Âπ∂Â°´ÂÖ•ÊÇ®ÁöÑÁúüÂÆûAPIÂØÜÈí•
# ‚ö†Ô∏è  Ë≠¶ÂëäÔºö.envÊñá‰ª∂ÂåÖÂê´ÊïèÊÑü‰ø°ÊÅØÔºåËØ∑ÂãøÊèê‰∫§Âà∞Git‰ªìÂ∫ì

# ===== ÂøÖÈúÄÁöÑAPIÂØÜÈí• =====
```bash
# TradingAgents-CN example environment configuration
# üîê Important: copy this file to .env and fill in your real API keys
# ‚ö†Ô∏è Warning: .env contains sensitive values; do not commit it to a public repository

# ===== Required API keys =====

# üá®üá≥ DashScope (Aliyun) API key (recommended for Chinese-local models, Chinese-optimized)
# URL: https://dashscope.aliyun.com/
# Sign up for an Aliyun account -> enable DashScope -> obtain API key
# Format: sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
DASHSCOPE_API_KEY=your_dashscope_api_key_here

# üìä FinnHub API key (required for US equity financial data)
# URL: https://finnhub.io/
# Free accounts allow ~60 requests per minute, usually sufficient for daily use
# Format: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
FINNHUB_API_KEY=your_finnhub_api_key_here

# üìà Tushare API token (recommended for Chinese market data)
# URL: https://tushare.pro/register?reg=128886
# Steps:
# 1. Register a Tushare account and verify your email
# 2. Log in -> Personal Center -> Get your token
# 3. Copy the token (format: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
# Note: free accounts have rate limits; consider upgrading for higher quotas
TUSHARE_TOKEN=your_tushare_token_here
TUSHARE_ENABLED=false
# Note: supports multiple boolean literals (true/True/TRUE/1/yes/on)

# üéØ Default China stock data source (recommended: akshare)
# Options: akshare, tushare, baostock, tdx (deprecated)
DEFAULT_CHINA_DATA_SOURCE=akshare

# ===== Optional API keys =====

# üá®üá≥ SiliconFlow API key (optional, Chinese-local model)
# URL: https://www.siliconflow.cn/
SILICONFLOW_API_KEY=your_siliconflow_api_key_here

# üåç OpenAI API key (optional; requires outbound network access)
# URL: https://platform.openai.com/
OPENAI_API_KEY=your_openai_api_key_here

# üåê OpenRouter API key (optional; aggregates many models)
# URL: https://openrouter.ai/
# Single key can access 50+ models including some free models
OPENROUTER_API_KEY=your_openrouter_api_key_here

# üîç Google AI (Gemini) API key (optional)
# URL: https://ai.google.dev/
GOOGLE_API_KEY=your_google_api_key_here

# ü§ñ Anthropic API key (optional, for Claude)
# URL: https://console.anthropic.com/
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# üöÄ DeepSeek V3 API key (recommended, high cost-performance ratio)
# URL: https://platform.deepseek.com/
DEEPSEEK_API_KEY=your_deepseek_api_key_here
DEEPSEEK_BASE_URL=https://api.deepseek.com
DEEPSEEK_ENABLED=false

# Generic OpenAI-compatible provider keys (optional)
# Use this template to add other OpenAI-compatible providers
# Replace YOUR_PROVIDER with the provider name (e.g., MOONSHOT, ZHIPU)
# YOUR_PROVIDER_API_KEY=your_provider_api_key_here
# YOUR_PROVIDER_BASE_URL=https://api.yourprovider.com

# Qianfan (Baidu) API key (OpenAI-compatible form, often starts with bce-v3/)
QIANFAN_API_KEY=your_qianfan_api_key_here

# Custom OpenAI endpoint key (for custom deployments)
CUSTOM_OPENAI_API_KEY=your-custom-openai-api-key

# ===== Project configuration =====

# Results directory
TRADINGAGENTS_RESULTS_DIR=./results

# Data directory (optional; default ./data)
TRADINGAGENTS_DATA_DIR=./data

# Cache directory (optional; default ./cache)
TRADINGAGENTS_CACHE_DIR=./cache

# Log level (DEBUG, INFO, WARNING, ERROR)
TRADINGAGENTS_LOG_LEVEL=INFO

# Disable Python bytecode generation (useful for development)
PYTHONDONTWRITEBYTECODE=1

# ===== Memory & cache =====

# üß† Memory enabled switch (default: true)
# Set to false to disable ChromaDB memory (works around some Windows 10 compatibility issues)
MEMORY_ENABLED=true

# üîß Max worker threads (optional; defaults to CPU cores)
# Windows 10 users may prefer smaller values like 2 or 4
# MAX_WORKERS=4

# ===== Database configuration =====

# üîß Database enable switches (defaults: disabled; the system uses file cache)
MONGODB_ENABLED=false
REDIS_ENABLED=false

# üóÑÔ∏è MongoDB (persistence for stock data and analysis results)
# Local dev: scripts/start_services_alt_ports.bat (port 27018)
# Docker: docker-compose up -d (port 27017; host: mongodb)
MONGODB_HOST=localhost
MONGODB_PORT=27017
MONGODB_USERNAME=admin
MONGODB_PASSWORD=tradingagents123
MONGODB_DATABASE=tradingagents
MONGODB_AUTH_SOURCE=admin

# üì¶ Redis cache (high-speed cache and session management)
# Local dev: scripts/start_services_alt_ports.bat (port 6380)
# Docker: docker-compose up -d (port 6379; host: redis)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=tradingagents123
REDIS_DB=0

# ===== Reddit (optional) =====
# Used for social media sentiment
REDDIT_CLIENT_ID=your_reddit_client_id
REDDIT_CLIENT_SECRET=your_reddit_client_secret
REDDIT_USER_AGENT=TradingAgents-CN/1.0

# ===== Telemetry & cost tracking =====
ENABLE_COST_TRACKING=true
COST_ALERT_THRESHOLD=100.0
MAX_USAGE_RECORDS=10000

# Use MongoDB to store token usage stats (recommended for production)
USE_MONGODB_STORAGE=false
MONGODB_CONNECTION_STRING=mongodb://admin:tradingagents123@mongodb:27017/
MONGODB_DATABASE_NAME=tradingagents

# ===== Usage notes =====
# 1. Copy this file to .env: cp .env.example .env
# 2. Edit .env and fill in your real API keys
# 3. Required: at least one AI model key (recommended: DeepSeek or DASHSCOPE_API_KEY)
# 4. Recommended: TUSHARE_TOKEN (A-share data) and FINNHUB_API_KEY (US data)
# 5. Run python -m cli.main config to inspect configuration status
# 6. Run python -m cli.main test to validate configuration

# ===== API key links =====
# - DeepSeek: https://platform.deepseek.com/
# - DashScope (Aliyun): https://dashscope.aliyun.com/
# - OpenAI: https://platform.openai.com/
# - Google Gemini: https://aistudio.google.com/
# - Tushare (A-share): https://tushare.pro/
# - FinnHub (US): https://finnhub.io/

# ===== Docker notes =====
# If deploying with Docker, adjust these values:
# 1. Enable databases:
#    MONGODB_ENABLED=true
#    REDIS_ENABLED=true
# 2. Change hosts:
#    MONGODB_HOST=mongodb
#    REDIS_HOST=redis
# 3. Start services: docker-compose up -d
# 4. Access:
#    - Web app: http://localhost:8501
#    - Redis admin: http://localhost:8081
#    - MongoDB admin: http://localhost:8082

```

